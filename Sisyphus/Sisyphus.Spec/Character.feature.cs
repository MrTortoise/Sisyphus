// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Sisyphus.Spec
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Character")]
    public partial class CharacterFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Character.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Character", "In order to have a story there needs to be characters interacting\r\nAs a writer\r\nI" +
                    " want to be able to create and make characters interact", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have set up configuration to use testConfig", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I set the config key \"SessionTimeout\" to \"15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("I set ContextWrapper To use TestContextWrapper", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I set the user Identity to \"writer@admin.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("I have set SisyphusDateTime to TestDateTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("I have set the date to year \"2014\" Month \"7\" Day \"20\" hour \"19\" minute \"24\" secon" +
                    "d \"12\" millisecond \"123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I have created a test database called \"characterTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("I create a user with email \"writer@admin.com\" with password \"testtest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "role"});
            table1.AddRow(new string[] {
                        "Admin"});
            table1.AddRow(new string[] {
                        "Writer"});
            table1.AddRow(new string[] {
                        "Reader"});
#line 15
 testRunner.And("I assign the following roles to user \"writer@admin.com\"", ((string)(null)), table1, "And ");
#line 20
 testRunner.And("I log in with the user \"writer@admin.com\" and password \"testtest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("I use the controller WriterHome", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "backStory"});
            table2.AddRow(new string[] {
                        "test1",
                        "ooo itS BACK STORY"});
            table2.AddRow(new string[] {
                        "test2",
                        "COR HE THINKS ITS A WEAL STOWY"});
#line 22
 testRunner.And("I have created the stories", ((string)(null)), table2, "And ");
#line 26
 testRunner.And("I select the story \"test1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "history"});
            table3.AddRow(new string[] {
                        "testPlace",
                        "history1"});
            table3.AddRow(new string[] {
                        "testPlace2",
                        "history1"});
#line 27
 testRunner.And("I create the following places", ((string)(null)), table3, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Move a character to a location")]
        public virtual void MoveACharacterToALocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move a character to a location", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 33
 testRunner.Given("I have created a test database called \"characterTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "history"});
            table4.AddRow(new string[] {
                        "testPlace",
                        "noneZ"});
            table4.AddRow(new string[] {
                        "testplace2",
                        "noneZ"});
#line 34
 testRunner.And("I havecreated the following places", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "backstory",
                        "race",
                        "sex",
                        "place"});
            table5.AddRow(new string[] {
                        "jim",
                        "is some dude",
                        "last",
                        "kinda",
                        "testPlace"});
#line 38
 testRunner.And("I create the following characters", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "bit",
                        "bitvalue"});
            table6.AddRow(new string[] {
                        "0",
                        "1"});
#line 41
 testRunner.When("I create a journey for character to place \"testplace2\" in time called \"journey1\" " +
                    "with description \"a test journey\"", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "bit",
                        "bitvalue"});
            table7.AddRow(new string[] {
                        "0",
                        "2"});
#line 44
 testRunner.And("I wait for a time period", ((string)(null)), table7, "And ");
#line 47
 testRunner.Then("I expect character \"jim\" to be at place \"testplace2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Take a character moving to a location and split journey into 2")]
        public virtual void TakeACharacterMovingToALocationAndSplitJourneyInto2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take a character moving to a location and split journey into 2", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 50
 testRunner.Given("I have created a test database called \"characterTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "history"});
            table8.AddRow(new string[] {
                        "testPlace",
                        "noneZ"});
            table8.AddRow(new string[] {
                        "testplace2",
                        "noneZ"});
            table8.AddRow(new string[] {
                        "testplace3",
                        "noneZ"});
#line 51
 testRunner.And("I havecreated the following places", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "bit",
                        "bitValue",
                        "bitText"});
            table9.AddRow(new string[] {
                        "0",
                        "0",
                        "0"});
            table9.AddRow(new string[] {
                        "0",
                        "1",
                        "1"});
            table9.AddRow(new string[] {
                        "0",
                        "2",
                        "2"});
            table9.AddRow(new string[] {
                        "0",
                        "3",
                        "3"});
            table9.AddRow(new string[] {
                        "0",
                        "4",
                        "4"});
            table9.AddRow(new string[] {
                        "0",
                        "5",
                        "5"});
#line 56
 testRunner.And("I create a time system with the following members", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "bit",
                        "bitvalue"});
            table10.AddRow(new string[] {
                        "0",
                        "0"});
#line 64
 testRunner.And("I set the time to", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "backstory",
                        "race",
                        "sex"});
            table11.AddRow(new string[] {
                        "jim",
                        "is some dude",
                        "last",
                        "kinda"});
#line 67
 testRunner.And("I create the following characters", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "bit",
                        "bitvalue"});
            table12.AddRow(new string[] {
                        "0",
                        "5"});
#line 70
 testRunner.And("I create a journey for character to place \"testplace2\" in time called \"journey1\" " +
                    "with description \"a test journey\"", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "bit",
                        "bitvalue"});
            table13.AddRow(new string[] {
                        "0",
                        "2"});
#line 73
 testRunner.When("I split journey \"journey1\" at time into \"journey1\" description \"first part\" and \"" +
                    "journey2\" description \"second part\"", ((string)(null)), table13, "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "startTime",
                        "duration",
                        "description"});
            table14.AddRow(new string[] {
                        "journey1",
                        "0",
                        "2",
                        "first part"});
            table14.AddRow(new string[] {
                        "journey2",
                        "2",
                        "3",
                        "second part"});
#line 76
 testRunner.Then("I expect character \"jim\" to have the following journeys", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
